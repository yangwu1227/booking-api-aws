name: Rotate Passwords for Dev and Prod Environments

on:
  # Trigger every 3 days at midnight UTC and via manual trigger
  schedule:
    - cron: "0 0 */3 * *"
  workflow_dispatch:

permissions:
  id-token: write  # Required for requesting the Json Web Token (JWT)
  contents: read   # Required for actions/checkout

jobs:
  rotate-passwords:
    name: Rotate Passwords
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev, prod]
        username_role:
          - { username: 'admin', role: 'admin' }
          - { username: 'requester', role: 'requester' }

    defaults:
      run:
        working-directory: 'services/booking'

    steps:
      - name: Checkout repository
        id: checkout-code
        uses: actions/checkout@v4

      - name: Configure AWS credentials from OIDC for ${{ matrix.environment }}
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            audience: sts.amazonaws.com
            aws-region: ${{ secrets.AWS_REGION }}
            role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
            role-session-name: rotate-passwords-${{ matrix.environment }}-session

      - name: Install pdm
        id: install-pdm
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        id: install-dependencies
        run: pdm install --check --no-editable -G cloud

      - name: Rotate Passwords for ${{ matrix.username_role.username }} in ${{ matrix.environment }} using ECS
        id: rotate-passwords
        run: |
            pdm run python3 tools/manage_passwords_trigger.py \
                            --env ${{ matrix.environment }} \
                            --username ${{ matrix.username_role.username }} \
                            --role ${{ matrix.username_role.role }} \
                            --cluster_name booking_service_${{ matrix.environment }}_ecs_fargate_cluster \
                            --subnet_ids ${{ secrets.AWS_PRIVATE_SUBNET_1_ID }} ${{ secrets.AWS_PRIVATE_SUBNET_2_ID }} \
                            --security_group_id ${{ secrets.AWS_ECS_SECURITY_GROUP_ID }} 
